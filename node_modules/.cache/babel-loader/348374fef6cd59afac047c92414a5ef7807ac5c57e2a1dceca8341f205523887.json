{"ast":null,"code":"var _jsxFileName = \"D:\\\\YoutubeSubtitleExtractor\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LANGUAGES = [{\n  code: 'en',\n  name: 'English'\n}, {\n  code: 'hi',\n  name: 'Hindi'\n}, {\n  code: 'gu',\n  name: 'Gujarati'\n}, {\n  code: 'es',\n  name: 'Spanish'\n}, {\n  code: 'fr',\n  name: 'French'\n}, {\n  code: 'de',\n  name: 'German'\n}, {\n  code: 'ja',\n  name: 'Japanese'\n}, {\n  code: 'zh',\n  name: 'Chinese'\n}, {\n  code: 'ar',\n  name: 'Arabic'\n}, {\n  code: 'bn',\n  name: 'Bengali'\n}];\nfunction App() {\n  _s();\n  const [url, setUrl] = useState('');\n  const [language, setLanguage] = useState('en');\n  const [subtitles, setSubtitles] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const extractVideoId = url => {\n    const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[2].length === 11 ? match[2] : null;\n  };\n  const checkVideoExists = async videoId => {\n    try {\n      const response = await fetch(`https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=${videoId}&format=json`);\n      return response.ok;\n    } catch (err) {\n      return false;\n    }\n  };\n  const fetchSubtitles = async () => {\n    setError('');\n    setSubtitles('');\n    setLoading(true);\n    const videoId = extractVideoId(url);\n    if (!videoId) {\n      setError('Invalid YouTube URL');\n      setLoading(false);\n      return;\n    }\n    console.log('Video ID:', videoId);\n    console.log('Selected language:', language);\n\n    // First check if the video exists\n    const videoExists = await checkVideoExists(videoId);\n    if (!videoExists) {\n      setError('Video not found or is private');\n      setLoading(false);\n      return;\n    }\n    try {\n      // First, get the list of available caption tracks\n      const listUrl = `https://www.youtube.com/api/timedtext?type=list&v=${videoId}`;\n      console.log('Fetching caption tracks:', listUrl);\n      const listResponse = await fetch(listUrl, {\n        headers: {\n          'Accept': 'application/xml, text/xml, */*; q=0.01',\n          'Accept-Language': 'en-US,en;q=0.9',\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n        }\n      });\n      const listText = await listResponse.text();\n      console.log('Caption tracks response:', listText);\n      if (!listText || !listText.includes('<?xml')) {\n        setError('Could not fetch available subtitle tracks');\n        setLoading(false);\n        return;\n      }\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(listText, 'text/xml');\n      const tracks = xmlDoc.getElementsByTagName('track');\n\n      // Find the track for the selected language\n      let selectedTrack = null;\n      for (const track of tracks) {\n        const lang = track.getAttribute('lang_code');\n        if (lang === language) {\n          selectedTrack = track;\n          break;\n        }\n      }\n      if (!selectedTrack) {\n        setError('No subtitles available for this language');\n        setLoading(false);\n        return;\n      }\n\n      // Get the name parameter from the track\n      const name = selectedTrack.getAttribute('name');\n      const kind = selectedTrack.getAttribute('kind') || '';\n\n      // Try to fetch subtitles with the correct parameters\n      const subtitleUrl = `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}${name ? `&name=${name}` : ''}${kind ? `&kind=${kind}` : ''}`;\n      console.log('Fetching subtitles:', subtitleUrl);\n      const response = await fetch(subtitleUrl, {\n        headers: {\n          'Accept': 'application/xml, text/xml, */*; q=0.01',\n          'Accept-Language': 'en-US,en;q=0.9',\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n        }\n      });\n      const text = await response.text();\n      console.log('Subtitles response:', text);\n      if (!text || !text.includes('<?xml')) {\n        setError('Could not fetch subtitles');\n        setLoading(false);\n        return;\n      }\n      const subtitleDoc = parser.parseFromString(text, 'text/xml');\n      const textNodes = subtitleDoc.getElementsByTagName('text');\n      if (textNodes.length === 0) {\n        setError('No subtitles found in the response');\n        setLoading(false);\n        return;\n      }\n      const subtitleText = Array.from(textNodes).map(node => node.textContent).join(' ');\n      if (!subtitleText.trim()) {\n        setError('No subtitle content found');\n        setLoading(false);\n        return;\n      }\n      setSubtitles(subtitleText);\n    } catch (err) {\n      console.error('Error fetching subtitles:', err);\n      setError('Error fetching subtitles. Please try again.');\n    }\n    setLoading(false);\n  };\n  const downloadSubtitles = () => {\n    const element = document.createElement('a');\n    const file = new Blob([subtitles], {\n      type: 'text/plain'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = 'subtitles.txt';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 py-12 px-4 sm:px-6 lg:px-8\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-2xl mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6 space-y-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-2xl font-bold text-center text-gray-800\",\n          children: \"YouTube Subtitle Extractor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: url,\n            onChange: e => setUrl(e.target.value),\n            placeholder: \"Paste YouTube URL here\",\n            className: \"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: language,\n            onChange: e => setLanguage(e.target.value),\n            className: \"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\",\n            children: LANGUAGES.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: lang.code,\n              children: lang.name\n            }, lang.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: fetchSubtitles,\n            disabled: loading,\n            className: \"w-full bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\",\n            children: loading ? 'Loading...' : 'ðŸš€ Extract Text'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-red-500 text-center p-4 bg-red-50 rounded-md\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this), subtitles && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"max-h-60 overflow-y-auto p-4 bg-gray-50 rounded-md\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-700 whitespace-pre-wrap\",\n              children: subtitles\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: downloadSubtitles,\n            className: \"w-full bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors\",\n            children: \"\\uD83D\\uDCE5 Download Subtitles as .txt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mB3er2WM0qJ0RHnnvSdfUsWbkUw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","LANGUAGES","code","name","App","_s","url","setUrl","language","setLanguage","subtitles","setSubtitles","error","setError","loading","setLoading","extractVideoId","regExp","match","length","checkVideoExists","videoId","response","fetch","ok","err","fetchSubtitles","console","log","videoExists","listUrl","listResponse","headers","listText","text","includes","parser","DOMParser","xmlDoc","parseFromString","tracks","getElementsByTagName","selectedTrack","track","lang","getAttribute","kind","subtitleUrl","subtitleDoc","textNodes","subtitleText","Array","from","map","node","textContent","join","trim","downloadSubtitles","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","removeChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/YoutubeSubtitleExtractor/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst LANGUAGES = [\r\n  { code: 'en', name: 'English' },\r\n  { code: 'hi', name: 'Hindi' },\r\n  { code: 'gu', name: 'Gujarati' },\r\n  { code: 'es', name: 'Spanish' },\r\n  { code: 'fr', name: 'French' },\r\n  { code: 'de', name: 'German' },\r\n  { code: 'ja', name: 'Japanese' },\r\n  { code: 'zh', name: 'Chinese' },\r\n  { code: 'ar', name: 'Arabic' },\r\n  { code: 'bn', name: 'Bengali' },\r\n];\r\n\r\nfunction App() {\r\n  const [url, setUrl] = useState('');\r\n  const [language, setLanguage] = useState('en');\r\n  const [subtitles, setSubtitles] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const extractVideoId = (url) => {\r\n    const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\r\n    const match = url.match(regExp);\r\n    return (match && match[2].length === 11) ? match[2] : null;\r\n  };\r\n\r\n  const checkVideoExists = async (videoId) => {\r\n    try {\r\n      const response = await fetch(`https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=${videoId}&format=json`);\r\n      return response.ok;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const fetchSubtitles = async () => {\r\n    setError('');\r\n    setSubtitles('');\r\n    setLoading(true);\r\n\r\n    const videoId = extractVideoId(url);\r\n    if (!videoId) {\r\n      setError('Invalid YouTube URL');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    console.log('Video ID:', videoId);\r\n    console.log('Selected language:', language);\r\n\r\n    // First check if the video exists\r\n    const videoExists = await checkVideoExists(videoId);\r\n    if (!videoExists) {\r\n      setError('Video not found or is private');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // First, get the list of available caption tracks\r\n      const listUrl = `https://www.youtube.com/api/timedtext?type=list&v=${videoId}`;\r\n      console.log('Fetching caption tracks:', listUrl);\r\n      \r\n      const listResponse = await fetch(listUrl, {\r\n        headers: {\r\n          'Accept': 'application/xml, text/xml, */*; q=0.01',\r\n          'Accept-Language': 'en-US,en;q=0.9',\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\r\n        }\r\n      });\r\n      \r\n      const listText = await listResponse.text();\r\n      console.log('Caption tracks response:', listText);\r\n\r\n      if (!listText || !listText.includes('<?xml')) {\r\n        setError('Could not fetch available subtitle tracks');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const parser = new DOMParser();\r\n      const xmlDoc = parser.parseFromString(listText, 'text/xml');\r\n      const tracks = xmlDoc.getElementsByTagName('track');\r\n\r\n      // Find the track for the selected language\r\n      let selectedTrack = null;\r\n      for (const track of tracks) {\r\n        const lang = track.getAttribute('lang_code');\r\n        if (lang === language) {\r\n          selectedTrack = track;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!selectedTrack) {\r\n        setError('No subtitles available for this language');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Get the name parameter from the track\r\n      const name = selectedTrack.getAttribute('name');\r\n      const kind = selectedTrack.getAttribute('kind') || '';\r\n\r\n      // Try to fetch subtitles with the correct parameters\r\n      const subtitleUrl = `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}${name ? `&name=${name}` : ''}${kind ? `&kind=${kind}` : ''}`;\r\n      console.log('Fetching subtitles:', subtitleUrl);\r\n\r\n      const response = await fetch(subtitleUrl, {\r\n        headers: {\r\n          'Accept': 'application/xml, text/xml, */*; q=0.01',\r\n          'Accept-Language': 'en-US,en;q=0.9',\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\r\n        }\r\n      });\r\n\r\n      const text = await response.text();\r\n      console.log('Subtitles response:', text);\r\n\r\n      if (!text || !text.includes('<?xml')) {\r\n        setError('Could not fetch subtitles');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const subtitleDoc = parser.parseFromString(text, 'text/xml');\r\n      const textNodes = subtitleDoc.getElementsByTagName('text');\r\n      \r\n      if (textNodes.length === 0) {\r\n        setError('No subtitles found in the response');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const subtitleText = Array.from(textNodes)\r\n        .map(node => node.textContent)\r\n        .join(' ');\r\n\r\n      if (!subtitleText.trim()) {\r\n        setError('No subtitle content found');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      setSubtitles(subtitleText);\r\n    } catch (err) {\r\n      console.error('Error fetching subtitles:', err);\r\n      setError('Error fetching subtitles. Please try again.');\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const downloadSubtitles = () => {\r\n    const element = document.createElement('a');\r\n    const file = new Blob([subtitles], { type: 'text/plain' });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = 'subtitles.txt';\r\n    document.body.appendChild(element);\r\n    element.click();\r\n    document.body.removeChild(element);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-2xl mx-auto\">\r\n        <div className=\"bg-white rounded-lg shadow-lg p-6 space-y-6\">\r\n          <h1 className=\"text-2xl font-bold text-center text-gray-800\">\r\n            YouTube Subtitle Extractor\r\n          </h1>\r\n          \r\n          <div className=\"space-y-4\">\r\n            <input\r\n              type=\"text\"\r\n              value={url}\r\n              onChange={(e) => setUrl(e.target.value)}\r\n              placeholder=\"Paste YouTube URL here\"\r\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n            />\r\n            \r\n            <select\r\n              value={language}\r\n              onChange={(e) => setLanguage(e.target.value)}\r\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n            >\r\n              {LANGUAGES.map((lang) => (\r\n                <option key={lang.code} value={lang.code}>\r\n                  {lang.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n\r\n            <button\r\n              onClick={fetchSubtitles}\r\n              disabled={loading}\r\n              className=\"w-full bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n            >\r\n              {loading ? 'Loading...' : 'ðŸš€ Extract Text'}\r\n            </button>\r\n          </div>\r\n\r\n          {error && (\r\n            <div className=\"text-red-500 text-center p-4 bg-red-50 rounded-md\">\r\n              {error}\r\n            </div>\r\n          )}\r\n\r\n          {subtitles && (\r\n            <div className=\"space-y-4\">\r\n              <div className=\"max-h-60 overflow-y-auto p-4 bg-gray-50 rounded-md\">\r\n                <p className=\"text-gray-700 whitespace-pre-wrap\">{subtitles}</p>\r\n              </div>\r\n              \r\n              <button\r\n                onClick={downloadSubtitles}\r\n                className=\"w-full bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors\"\r\n              >\r\n                ðŸ“¥ Download Subtitles as .txt\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}