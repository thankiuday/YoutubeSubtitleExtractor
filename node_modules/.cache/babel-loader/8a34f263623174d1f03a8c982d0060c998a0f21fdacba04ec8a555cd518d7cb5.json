{"ast":null,"code":"var _jsxFileName = \"D:\\\\YoutubeSubtitleExtractor\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LANGUAGES = [{\n  code: 'en',\n  name: 'English'\n}, {\n  code: 'hi',\n  name: 'Hindi'\n}, {\n  code: 'gu',\n  name: 'Gujarati'\n}, {\n  code: 'es',\n  name: 'Spanish'\n}, {\n  code: 'fr',\n  name: 'French'\n}, {\n  code: 'de',\n  name: 'German'\n}, {\n  code: 'ja',\n  name: 'Japanese'\n}, {\n  code: 'zh',\n  name: 'Chinese'\n}, {\n  code: 'ar',\n  name: 'Arabic'\n}, {\n  code: 'bn',\n  name: 'Bengali'\n}];\nfunction App() {\n  _s();\n  const [url, setUrl] = useState('');\n  const [language, setLanguage] = useState('en');\n  const [subtitles, setSubtitles] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const extractVideoId = url => {\n    const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n    const match = url.match(regExp);\n    return match && match[2].length === 11 ? match[2] : null;\n  };\n  const checkVideoExists = async videoId => {\n    try {\n      const response = await fetch(`https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=${videoId}&format=json`);\n      return response.ok;\n    } catch (err) {\n      return false;\n    }\n  };\n  const fetchSubtitles = async () => {\n    setError('');\n    setSubtitles('');\n    setLoading(true);\n    const videoId = extractVideoId(url);\n    if (!videoId) {\n      setError('Invalid YouTube URL');\n      setLoading(false);\n      return;\n    }\n    console.log('Video ID:', videoId);\n    console.log('Selected language:', language);\n\n    // First check if the video exists\n    const videoExists = await checkVideoExists(videoId);\n    if (!videoExists) {\n      setError('Video not found or is private');\n      setLoading(false);\n      return;\n    }\n    try {\n      // Try different approaches to get subtitles\n      const subtitleUrls = [\n      // Try auto-generated subtitles with different parameters\n      `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&kind=asr&fmt=srv3&tlang=${language}`, `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&kind=asr&fmt=srv1&tlang=${language}`, `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&kind=asr&tlang=${language}`,\n      // Try manual subtitles\n      `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&fmt=srv3&tlang=${language}`, `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&fmt=srv1&tlang=${language}`, `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&tlang=${language}`,\n      // Try without tlang parameter\n      `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&kind=asr&fmt=srv3`, `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&kind=asr&fmt=srv1`, `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&kind=asr`,\n      // Try with name parameter\n      `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&name=${language}`,\n      // Try with track parameter\n      `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&track=${language}`];\n      for (const subtitleUrl of subtitleUrls) {\n        console.log('Trying URL:', subtitleUrl);\n        try {\n          const response = await fetch(subtitleUrl, {\n            headers: {\n              'Accept': 'application/xml, text/xml, */*; q=0.01',\n              'Accept-Language': 'en-US,en;q=0.9',\n              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n            }\n          });\n          const text = await response.text();\n          console.log('Response:', text);\n          if (text && text.includes('<?xml')) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(text, 'text/xml');\n            const textNodes = xmlDoc.getElementsByTagName('text');\n            if (textNodes.length > 0) {\n              const subtitleText = Array.from(textNodes).map(node => node.textContent).join(' ');\n              if (subtitleText.trim()) {\n                setSubtitles(subtitleText);\n                setLoading(false);\n                return;\n              }\n            }\n          }\n        } catch (err) {\n          console.error('Error with URL:', subtitleUrl, err);\n          continue;\n        }\n      }\n\n      // If we get here, no subtitles were found\n      setError('No subtitles available for this language. The video might not have subtitles or they might be disabled.');\n    } catch (err) {\n      console.error('Error fetching subtitles:', err);\n      setError('Error fetching subtitles. Please try again.');\n    }\n    setLoading(false);\n  };\n  const downloadSubtitles = () => {\n    const element = document.createElement('a');\n    const file = new Blob([subtitles], {\n      type: 'text/plain'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = 'subtitles.txt';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100 py-12 px-4 sm:px-6 lg:px-8\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-2xl mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-lg p-6 space-y-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-2xl font-bold text-center text-gray-800\",\n          children: \"YouTube Subtitle Extractor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: url,\n            onChange: e => setUrl(e.target.value),\n            placeholder: \"Paste YouTube URL here\",\n            className: \"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: language,\n            onChange: e => setLanguage(e.target.value),\n            className: \"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\",\n            children: LANGUAGES.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: lang.code,\n              children: lang.name\n            }, lang.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: fetchSubtitles,\n            disabled: loading,\n            className: \"w-full bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\",\n            children: loading ? 'Loading...' : 'ðŸš€ Extract Text'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-red-500 text-center p-4 bg-red-50 rounded-md\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this), subtitles && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"max-h-60 overflow-y-auto p-4 bg-gray-50 rounded-md\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-gray-700 whitespace-pre-wrap\",\n              children: subtitles\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: downloadSubtitles,\n            className: \"w-full bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors\",\n            children: \"\\uD83D\\uDCE5 Download Subtitles as .txt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mB3er2WM0qJ0RHnnvSdfUsWbkUw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","LANGUAGES","code","name","App","_s","url","setUrl","language","setLanguage","subtitles","setSubtitles","error","setError","loading","setLoading","extractVideoId","regExp","match","length","checkVideoExists","videoId","response","fetch","ok","err","fetchSubtitles","console","log","videoExists","subtitleUrls","subtitleUrl","headers","text","includes","parser","DOMParser","xmlDoc","parseFromString","textNodes","getElementsByTagName","subtitleText","Array","from","map","node","textContent","join","trim","downloadSubtitles","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","removeChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","lang","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/YoutubeSubtitleExtractor/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst LANGUAGES = [\r\n  { code: 'en', name: 'English' },\r\n  { code: 'hi', name: 'Hindi' },\r\n  { code: 'gu', name: 'Gujarati' },\r\n  { code: 'es', name: 'Spanish' },\r\n  { code: 'fr', name: 'French' },\r\n  { code: 'de', name: 'German' },\r\n  { code: 'ja', name: 'Japanese' },\r\n  { code: 'zh', name: 'Chinese' },\r\n  { code: 'ar', name: 'Arabic' },\r\n  { code: 'bn', name: 'Bengali' },\r\n];\r\n\r\nfunction App() {\r\n  const [url, setUrl] = useState('');\r\n  const [language, setLanguage] = useState('en');\r\n  const [subtitles, setSubtitles] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const extractVideoId = (url) => {\r\n    const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\r\n    const match = url.match(regExp);\r\n    return (match && match[2].length === 11) ? match[2] : null;\r\n  };\r\n\r\n  const checkVideoExists = async (videoId) => {\r\n    try {\r\n      const response = await fetch(`https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=${videoId}&format=json`);\r\n      return response.ok;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const fetchSubtitles = async () => {\r\n    setError('');\r\n    setSubtitles('');\r\n    setLoading(true);\r\n\r\n    const videoId = extractVideoId(url);\r\n    if (!videoId) {\r\n      setError('Invalid YouTube URL');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    console.log('Video ID:', videoId);\r\n    console.log('Selected language:', language);\r\n\r\n    // First check if the video exists\r\n    const videoExists = await checkVideoExists(videoId);\r\n    if (!videoExists) {\r\n      setError('Video not found or is private');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Try different approaches to get subtitles\r\n      const subtitleUrls = [\r\n        // Try auto-generated subtitles with different parameters\r\n        `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&kind=asr&fmt=srv3&tlang=${language}`,\r\n        `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&kind=asr&fmt=srv1&tlang=${language}`,\r\n        `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&kind=asr&tlang=${language}`,\r\n        // Try manual subtitles\r\n        `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&fmt=srv3&tlang=${language}`,\r\n        `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&fmt=srv1&tlang=${language}`,\r\n        `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&tlang=${language}`,\r\n        // Try without tlang parameter\r\n        `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&kind=asr&fmt=srv3`,\r\n        `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&kind=asr&fmt=srv1`,\r\n        `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&kind=asr`,\r\n        // Try with name parameter\r\n        `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&name=${language}`,\r\n        // Try with track parameter\r\n        `https://www.youtube.com/api/timedtext?lang=${language}&v=${videoId}&track=${language}`,\r\n      ];\r\n\r\n      for (const subtitleUrl of subtitleUrls) {\r\n        console.log('Trying URL:', subtitleUrl);\r\n        try {\r\n          const response = await fetch(subtitleUrl, {\r\n            headers: {\r\n              'Accept': 'application/xml, text/xml, */*; q=0.01',\r\n              'Accept-Language': 'en-US,en;q=0.9',\r\n              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\r\n            }\r\n          });\r\n          const text = await response.text();\r\n          console.log('Response:', text);\r\n\r\n          if (text && text.includes('<?xml')) {\r\n            const parser = new DOMParser();\r\n            const xmlDoc = parser.parseFromString(text, 'text/xml');\r\n            const textNodes = xmlDoc.getElementsByTagName('text');\r\n            \r\n            if (textNodes.length > 0) {\r\n              const subtitleText = Array.from(textNodes)\r\n                .map(node => node.textContent)\r\n                .join(' ');\r\n              \r\n              if (subtitleText.trim()) {\r\n                setSubtitles(subtitleText);\r\n                setLoading(false);\r\n                return;\r\n              }\r\n            }\r\n          }\r\n        } catch (err) {\r\n          console.error('Error with URL:', subtitleUrl, err);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // If we get here, no subtitles were found\r\n      setError('No subtitles available for this language. The video might not have subtitles or they might be disabled.');\r\n    } catch (err) {\r\n      console.error('Error fetching subtitles:', err);\r\n      setError('Error fetching subtitles. Please try again.');\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const downloadSubtitles = () => {\r\n    const element = document.createElement('a');\r\n    const file = new Blob([subtitles], { type: 'text/plain' });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = 'subtitles.txt';\r\n    document.body.appendChild(element);\r\n    element.click();\r\n    document.body.removeChild(element);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-2xl mx-auto\">\r\n        <div className=\"bg-white rounded-lg shadow-lg p-6 space-y-6\">\r\n          <h1 className=\"text-2xl font-bold text-center text-gray-800\">\r\n            YouTube Subtitle Extractor\r\n          </h1>\r\n          \r\n          <div className=\"space-y-4\">\r\n            <input\r\n              type=\"text\"\r\n              value={url}\r\n              onChange={(e) => setUrl(e.target.value)}\r\n              placeholder=\"Paste YouTube URL here\"\r\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n            />\r\n            \r\n            <select\r\n              value={language}\r\n              onChange={(e) => setLanguage(e.target.value)}\r\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n            >\r\n              {LANGUAGES.map((lang) => (\r\n                <option key={lang.code} value={lang.code}>\r\n                  {lang.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n\r\n            <button\r\n              onClick={fetchSubtitles}\r\n              disabled={loading}\r\n              className=\"w-full bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n            >\r\n              {loading ? 'Loading...' : 'ðŸš€ Extract Text'}\r\n            </button>\r\n          </div>\r\n\r\n          {error && (\r\n            <div className=\"text-red-500 text-center p-4 bg-red-50 rounded-md\">\r\n              {error}\r\n            </div>\r\n          )}\r\n\r\n          {subtitles && (\r\n            <div className=\"space-y-4\">\r\n              <div className=\"max-h-60 overflow-y-auto p-4 bg-gray-50 rounded-md\">\r\n                <p className=\"text-gray-700 whitespace-pre-wrap\">{subtitles}</p>\r\n              </div>\r\n              \r\n              <button\r\n                onClick={downloadSubtitles}\r\n                className=\"w-full bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors\"\r\n              >\r\n                ðŸ“¥ Download Subtitles as .txt\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}